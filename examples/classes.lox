class MyClass {
}

print MyClass;

var myClassInstance = MyClass();
print myClassInstance;
myClassInstance.a = 1;
myClassInstance.b = 2;
print myClassInstance.a + myClassInstance.b + (myClassInstance.c = 3);

print "----------------------------------------";

fun f() {
    class ClassInFun {}

    print ClassInFun;
}

f();

print "----------------------------------------";

class Nested {
    method() {
        fun function() {
            print this;
        }
        function();
    }
}

Nested().method();

print "----------------------------------------";

fun sqrt(a) {
    // Use Newton-Raphson (because I CBA to add exponents to the language)
    // f(x) = x ^ 2 - a
    // x_{n+1} = x_{n} - f(x_n) / f'(x_n)
    // f(x) / f'(x) = x / 2 - a / 2 / x
    if (a < 0) {
        print "Can't call sqrt on a negative number";
        sqrt(1, 2);  // die in a stupid way by calling sqrt with the wrong number of arguments.
    }
    var lastGuess = 0;
    var guess = 0.5 * a;
    while ((lastGuess - guess) * (lastGuess - guess) > 0.000000001) {
        lastGuess = guess;
        guess = guess - guess / 2 + a / 2 / guess;
    }
    return guess;
}

class MyGreatClass {
    init(a, b) {
        this.a = a;
        this.b = b;
    }

    hypotenuse() {
        return sqrt(this.a * this.a + this.b * this.b);
    }
}

var myGreatClassInstance = MyGreatClass(3, 4);
print myGreatClassInstance.hypotenuse();

print "----------------------------------------";

class ClassWithFieldLikeMethod {
    init() {
        fun f() {
            print "not a method.";
        }
        this.field = f;
    }
}

var classWithFieldLikeMethodInstance = ClassWithFieldLikeMethod();
classWithFieldLikeMethodInstance.field();

print "----------------------------------------";

class A {
    method() {
        print "A method";
    }
}

class B < A {
    method() {
        print "B method ";
    }

    test() {
        super.method();
    }
}

class C < B {}

C().test();

print "----------------------------------------";

class IClo {
    method() {
        print "A";
    }
}

class B < A {
    method() {
        var closure = super.method;
        closure();
    }
}

B().method();
